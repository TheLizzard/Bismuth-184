{"window": {"height": 850, "x": "760", "y": "196", "focused_text": "/media/thelizzard/D/All python projects/Bismuth-184/src/main.py"}, "explorer": {"width": 250, "hide_h_scroll": true, "hide_v_scroll": true, "open": [], "added": ["/media/thelizzard/D/All python projects/Bismuth-184/src"], "expanded": ["/media/thelizzard/D/All python projects/Bismuth-184/src"]}, "notebook": {"width": 900, "open": [["/media/thelizzard/D/All python projects/Bismuth-184/src/main.py", null, 0.0, 0.0, "23.10", "from __future__ import annotations\nfrom tkinter.filedialog import askdirectory\nimport tkinter as tk\nimport os\n\nfrom file_explorer.expanded_explorer import ExpandedExplorer, isfolder\nfrom file_explorer.bindframe import make_bind_frame\nfrom bettertk.notebook import Notebook\nfrom bettertk.betterframe import BetterFrame\nfrom bettertk.betterscrollbar import BetterScrollBarVertical, \\\n                                     BetterScrollBarHorizontal\nfrom bettertk.messagebox import askyesno, tell as telluser\nfrom bettertk import BetterTk\nfrom plugins import PythonPlugin, VirtualEvents\nfrom settings.settings import curr as settings\n\n# tk.Event.state constants\nSHIFT:int = 1\nALT:int = 8\nCTRL:int = 4\n\n\nclass App:\n    __slots__ = \"root\", \"explorer\", \"notebook\", \"text_to_page\", \\\n                \"explorer_frame\"\n\n    def __init__(self) -> App:\n        self.text_to_page:dict[tk.Text:NotebookPage] = {}\n        self.root:BetterTk = BetterTk()\n        self.root.title(\"Bismuth-184\")\n        self.root.iconphoto(False, \"sprites/Bismuth_184.ico\")\n        self.root.protocol(\"WM_DELETE_WINDOW\", self.root_close)\n        self.root.geometry(f\"+{settings.window.x}+{settings.window.y}\")\n        pannedwindow = tk.PanedWindow(self.root, orient=\"horizontal\", bd=0,\n                                      height=settings.window.height,\n                                      sashwidth=4)\n        pannedwindow.pack(fill=\"both\", expand=True)\n\n        self.notebook:Notebook = Notebook(pannedwindow)\n        self.notebook.bind(\"<<Tab-Create>>\", lambda _: self.new_tab())\n        self.notebook.bind(\"<<Tab-Switched>>\", self.change_selected_tab)\n        self.notebook.on_try_close = self.close_tab\n\n        left_frame:tk.Frame = tk.Frame(pannedwindow, bd=0, bg=\"black\",\n                                       highlightthickness=0)\n        add = tk.Button(left_frame, text=\"Add Folder\", bg=\"black\", fg=\"white\",\n                        activebackground=\"grey\", activeforeground=\"white\",\n                        highlightthickness=0, takefocus=False,\n                        command=self.explorer_add_folder, relief=\"flat\")\n        add.grid(row=1, column=1, sticky=\"news\")\n        sep = tk.Canvas(left_frame, bg=\"grey\", bd=0, highlightthickness=0,\n                        width=1, height=1)\n        sep.grid(row=1, column=2, sticky=\"news\")\n        sep = tk.Canvas(left_frame, bg=\"grey\", bd=0, highlightthickness=0,\n                        width=1, height=1)\n        sep.grid(row=2, column=1, columnspan=3, sticky=\"news\")\n        rem = tk.Button(left_frame, text=\"Remove Folder\", bg=\"black\", fg=\"white\",\n                        activebackground=\"grey\", activeforeground=\"white\",\n                        highlightthickness=0, takefocus=False,\n                        command=self.explorer_remove_folder, relief=\"flat\")\n        rem.grid(row=1, column=3, sticky=\"news\")\n        left_frame.grid_rowconfigure(3, weight=1)\n        left_frame.grid_columnconfigure((1, 3), weight=1)\n        self.explorer_frame = BetterFrame(left_frame, hscroll=True,\n                                          vscroll=True, bg=\"black\",\n                                     HScrollBarClass=BetterScrollBarHorizontal,\n                                     VScrollBarClass=BetterScrollBarVertical,\n                                     scroll_speed=1)\n        self.explorer_frame.grid(row=3, column=1, columnspan=3, sticky=\"news\")\n        if settings.explorer.hide_h_scroll:\n            self.explorer_frame.h_scrollbar.hide:bool = True\n        if settings.explorer.hide_v_scroll:\n            self.explorer_frame.v_scrollbar.hide:bool = True\n        # scrollbar_kwargs=dict(width=4),\n        VirtualEvents(self.explorer_frame) # Must be before the BindFrame\n        make_bind_frame(self.explorer_frame)\n        self.explorer:ExpandedExplorer = ExpandedExplorer(self.explorer_frame)\n        self.explorer_frame.bind(\"<<Explorer-Open>>\", self.open_tab_explorer)\n\n        pannedwindow.add(left_frame, sticky=\"news\",\n                         width=settings.explorer.width)\n        pannedwindow.add(self.notebook, sticky=\"news\",\n                         width=settings.notebook.width)\n\n        self._set_notebook_state(settings.notebook.open)\n        self._set_explorer_state(settings.explorer.added,\n                                 settings.explorer.expanded)\n        for text, page in self.text_to_page.items():\n            if text.filepath == settings.window.focused_text:\n                page.focus()\n                break\n\n    # Helpers\n    @staticmethod\n    def get_filename(filepath:str) -> str:\n        if filepath is None:\n            return \"Untitled\"\n        return filepath.split(\"/\")[-1].split(\"\\\\\")[-1]\n\n    def page_to_text(self, page:NotebookPage) -> tk.Text:\n        if page is None:\n            return None\n        for text, p in self.text_to_page.items():\n            if p == page:\n                return text\n        raise KeyError(\"InternalError\")\n\n    # Tab management\n    def new_tab(self, filepath:str=None) -> tk.Text:\n        text = tk.Text(self.notebook, highlightthickness=0, bd=0)\n        text.filesystem_data:str = \"\"\n        text.save_module:bool = True\n        text.bind(\"<Control-W>\", self.control_w)\n        text.bind(\"<Control-w>\", self.control_w)\n        page = self.notebook.tab_create().add_frame(text)\n        self.text_to_page[text] = page\n        page.focus()\n        text.plugin = PythonPlugin(text)\n        text.plugin.attach()\n        text.focus_set()\n        text.bind(\"<<Request-Save>>\", self.request_save, add=True)\n        text.bind(\"<<Request-Open>>\", self.request_open, add=True)\n        text.bind(\"<<Modified-Change>>\", self.rename_tab, add=True)\n        if filepath:\n            text.edit_modified(False)\n            text.filepath:str = filepath\n            text.event_generate(\"<<Trigger-Open>>\")\n        else:\n            text.insert(\"end\", PythonPlugin.DEFAULT_CODE)\n            text.edit_modified(True)\n            text.event_generate(\"<<Modified-Change>>\")\n        return text\n\n    def change_selected_tab(self, event:tk.Event=None) -> None:\n        if self.notebook.curr_page is None:\n            return None\n        self.page_to_text(self.notebook.curr_page).focus_set()\n\n    def rename_tab(self, event:tk.Event) -> None:\n        filename:str = self.get_filename(event.widget.filepath)\n        if event.widget.edit_modified():\n            filename:str = f\"*{filename}*\"\n        self.text_to_page[event.widget].rename(filename)\n\n    def control_w(self, event:tk.Event) -> str:\n        if (event.state&SHIFT) or (self.notebook.curr_page is None):\n            self.root_close()\n            return \"\"\n        # event.widget is useless here for some reason\n        self.notebook.tab_destroy(self.notebook.curr_page)\n        return \"break\"\n\n    def close_tab(self, page:NotebookPage) -> bool:\n        text:tk.Text = self.page_to_text(page)\n        block:bool = False\n        if text.edit_modified():\n            title:str = \"Close unsaved text?\"\n            msg:str = \"Are you sure you want to\\nclose this unsaved page?\"\n            block = not askyesno(self.root, title=title, message=msg,\n                                 center=True, icon=\"warning\",\n                                 center_widget=text)\n        if not block:\n            self.text_to_page.pop(text)\n        return block\n\n    def open_tab_explorer(self, _:tk.Event) -> None:\n        path:str = self.explorer.selected.item.fullpath\n        for text, page in self.text_to_page.items():\n            if text.filepath == path:\n                page.focus()\n                return None\n        self.new_tab(path)\n\n    # Save close\n    def request_save(self, event:tk.Event) -> None:\n        if event.widget.filepath is None:\n            filesystem_data:bytes = None\n        elif not os.path.exists(event.widget.filepath):\n            filesystem_data:bytes = None\n        else:\n            with open(event.widget.filepath, \"br\") as file:\n                filesystem_data:bytes = file.read()\n        if event.widget.filesystem_data.encode(\"utf-8\") != filesystem_data:\n            title:str = \"Merge conflict\"\n            msg:str = \"The file has been modified on the filesystem.\\n\" \\\n                      \"Are you sure you want to save it?\"\n            ret:bool = askyesno(self.root, title=title, icon=\"warning\",\n                                message=msg, center=True,\n                                center_widget=event.widget)\n            if not ret:\n                return None\n        event.widget.event_generate(\"<<Trigger-Save>>\")\n\n    def request_open(self, event:tk.Event) -> None:\n        if event.widget.edit_modified():\n            title:str = \"Discard changes to this file?\"\n            msg:str = \"You haven't saved this file. Are you sure you\\n\" \\\n                      \"want to continue and discard the changes?\"\n            ret:bool = askyesno(self.root, title=title, icon=\"warning\",\n                                message=msg, center=True,\n                                center_widget=event.widget)\n            if not ret:\n                return None\n        event.widget.event_generate(\"<<Trigger-Open>>\")\n\n    # Handle the get/set state\n    def root_close(self) -> None:\n        _, x, y = self.root.geometry().split(\"+\")\n        added, expanded = self._get_explorer_state()\n        true_explorer_frame:tk.Frame = self.explorer_frame.master_frame\n        curr_text:tk.Text = self.page_to_text(self.notebook.curr_page)\n        curr_text_path:str = None if curr_text is None else curr_text.filepath\n\n        settings.window.update(height=self.root.winfo_height(), x=x, y=y)\n        settings.explorer.update(width=true_explorer_frame.winfo_width())\n        settings.notebook.update(width=self.notebook.winfo_width())\n        settings.notebook.update(open=self._get_notebook_state())\n        settings.explorer.update(added=added, expanded=expanded)\n        settings.window.update(focused_text=curr_text_path)\n        settings.save()\n        self.root.destroy()\n\n    def _get_notebook_state(self) -> list[tuple]:\n        opened:list[tuple] = []\n        for text in self.text_to_page:\n            file:str = text.filepath\n            yview:str = text.yview()[0]\n            xview:str = text.xview()[0]\n            insert:str = text.index(\"insert\")\n            saved:str = text.filesystem_data\n            modified:str = text.edit_modified()\n            if modified:\n                data:str = text.get(\"1.0\", \"end\").removesuffix(\"\\n\")\n            else:\n                data:str = None\n            opened.append([file, data, yview, xview, insert, saved, modified])\n        return opened\n\n    def _set_notebook_state(self, opened:list[tuple]) -> None:\n        files:set[str] = set()\n        for file, data, yview, xview, insert, saved, modified in opened:\n            if file in files:\n                title:str = \"Single file in multiple tabs\"\n                msg:str = \"Please don't open the same file in multiple\\n\" \\\n                          \"tabs as that can cause problems for this editor\"\n                telluser(self.root, title=title, message=msg, center=True,\n                         icon=\"warning\")\n            elif file is not None:\n                files.add(file)\n            text:tk.Text = self.new_tab(file)\n            if modified:\n                text.delete(\"0.0\", \"end\")\n                text.insert(\"end\", data)\n                text.edit_modified(True)\n                text.edit_reset()\n                text.edit_separator()\n                text.event_generate(\"<<Modified-Change>>\")\n            text.event_generate(\"<<Move-Insert>>\", data=(insert,))\n            text.mark_set(\"insert\", insert)\n            text.xview(\"moveto\", xview)\n            text.yview(\"moveto\", yview)\n            text.filesystem_data:str = saved\n            # Validity check:\n            if (file is not None) and modified:\n                problem:bool = True\n                if os.access(file, os.R_OK):\n                    with open(file, \"r\") as fd:\n                        problem:bool = saved != fd.read()\n                if problem:\n                    title:str = \"Merge Conflict\"\n                    msg:str = f\"The file {file} has been\\nmodified on \" \\\n                              \"you system and there are changes in this \" \\\n                              \"editor.\\nThis means that you have a \" \\\n                              \"merge conflict.\"\n                    telluser(self.root, title=title, message=msg,\n                             center=True, icon=\"warning\",\n                             center_widget=text, block=False)\n\n    def explorer_remove_folder(self) -> None:\n        if self.explorer.selected is None:\n            return None\n        selected:Item = self.explorer.selected.item\n        if selected not in self.explorer.root.children:\n            return None\n        self.explorer.remove(selected)\n\n    def explorer_add_folder(self) -> None:\n        path:str = askdirectory(master=self.root)\n        if not path:\n            return None\n        self.explorer.add(path)\n\n    def _get_explorer_state(self) -> tuple[list[str],list[str]]:\n        getpath = lambda item: item.fullpath\n        added:list[str] = list(map(getpath, self.explorer.root.children))\n        expanded:list[str] = []\n        for item, _ in self.explorer.root.recurse_children(withself=False):\n            if isfolder(item) and item.expanded:\n                expanded.append(item.fullpath)\n        return added, expanded\n\n    def _set_explorer_state(self, added:list[str], expanded:list[str]) -> None:\n        for path in added:\n            self.explorer.add(path)\n        expanded:set[str] = set(expanded)\n        for item, _ in self.explorer.root.recurse_children(withself=False):\n            if isfolder(item) and (item.fullpath in expanded):\n                self.explorer.expand(item)\n\n    # The mainloop function\n    def mainloop(self) -> None:\n        self.root.mainloop()\n\n\nif __name__ == \"__main__\":\n    app:App = App()\n\n    try:\n        import sys\n        sys.stdin.fileno()\n        app.mainloop()\n    except ValueError:\n        pass # Inside IDLE\n    except KeyboardInterrupt:\n        pass", 0]]}}